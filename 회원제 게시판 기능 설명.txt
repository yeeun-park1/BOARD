프로젝트명 : 회원제 게시판 (Spring  - 데이터베이스 기반)

투입인원 : 1명

프로젝트 소개 : 회원들만 등록하고 볼 수 있는 회원제 게시판

사전 작업 :
1. 데이터베이스 기획 및 구현
2. 필요한 자료 수집

기능 구현
1. 메인 화면
	bxSlider을 사용해서 이미지 전환

2. fragments
	Header. Footer을 th:fragment를 활용하여 분리 작업 가능
	분리한 뒤, 사용할 페이지에서 th:insert를 활용하여 출력
	th:if 와 th:unless를 활용하여 상황에 따라 다르게 출력되도록 적용

3. 회원가입 페이지
	아이디 중복 확인 클릭 시 데이터베이스에서 동일 아이디 있는지 비교 후 메시지 출력
	정보 입력 후 가입 버튼 클릭
	BCryptPasswordEncoder를 이용하여 비밀번호 암호화 처리
	가입 버튼 클릭 시 작성된 정보가 데이터 베이스에 저장 후 로그인 페이지로 이동 : 
3번 기능

4. 로그인 페이지
	아이디와 비밀번호 입력
	아이디를 데이터베이스의 아이디와 비교
	같은 아이디를 기준으로 암호화된 비밀번호를 비교
	일치할 경우 로그인 정보를 세션에 저장한 뒤 메인 화면으로 이동 : 1번 기능
	불일치할 경우 메시지 출력 후 로그인 화면 지속
 
5. 게시글 목록 페이지
	게시글 목록에 데이터 베이스에 있는 정보들을 출력
	원하는 게시글을 클릭 시 해당 게시글 상세 페이지로 이동 : 6번 기능
	보유하고 있는 게시글 개수를 기반으로 필요한 만큼 페이지 이동 : 7번 기능
	글쓰기 버튼을 활용하여 게시글 작성 페이지로 이동 : 8번 기능

6. 게시글 상세 페이지
	게시글의 기본키를 사용하여 하나의 HTML에 클릭되어진 게시글의 정보가 넘어와서 출력
	게시글의 기본키를 활용하여 해당 파일과 댓글도 함께 출력
	댓글 작성 및 출력 기능 : 14번 기능
	조회수 기능 : 10번 기능
	댓글 기능 : 11번 기능
	로그인한 고객의 정보(세션에 저장)가 게시글 작성자와 같다면 Delete 버튼과 Update 버튼을 출력 – 평소에 두개의 버튼은 hide : Back버튼만 출력 
	Update 클릭 시 : 수정 페이지로 이동 : 13번 기능
	Delete 클릭 시 : 메시지 출력 후 확인 시 데이터 베이스와 목록에서 삭제 : 12번 기능
	Back 클릭 시 : 게시글 목록 페이지로 이동 :  5번 기능

7.  페이지 기능
	페이지버튼이 필요한 화면에다가 삽입
	출력할 게시물의 개수에 비례해서 필요한 페이지 버튼이 생성 
	Ex :  1  or  1 2 3 4 5  
	삼각형을 클릭 시 이전 혹은 다음 페이지로 이동
	숫자를 클릭 시 해당 페이지로 이동

8. 게시글 작성 페이지
	로그인한 회원의 정보(세션에 저장)를 hidden으로 출력
	파일 업로드시 파일명 및 개수 출력
	파일 업로드 가능 : 9번 기능
	Write , Reset, Back 버튼을 통해 기능 구현
	Write클릭 시 : 데이터베이스에 작성 및 첨부된 정보가 데이터 베이스에 저장된 뒤 게시글 목록으로 이동
	Reset클릭 시 : 작성한 내용들 전부 초기화
	Back 클릭 시 : 게시글 목록으로 이동 :  5번 기능
	삭제  /  삽입 / 수정은 Transaction을 활용

9. 파일 업로드 기능
	파일 업로드 시 webapp의 upload폴더에 저장
	폴더가 없을 경우 폴더 생성 처리
	해당 리뷰 작성 버튼 클릭 시 해당 리뷰의 기본키를 외래키로 데이터 베이스에 삽입
	삭제  /  삽입 / 수정은 Transaction을 활용 : 12번 기능
	파일의 이름은 중복 가능성을 염두 하여 밀로 초를 활용하여 새로운 이름으로 저장
	파일의 경로를 realPath를 활용하여 저장

10. 조회수 기능
	세션에 저장되어 있는 로그인한 고객의 정보를 이용하여 게시글 작성자와 로그인 고객이 동일 인물이 아닌 경우 조회수가 1씩 증가
	증가된 조회수를 게시글의 기본키를 활용하여 데이터 베이스에 업데이트 : 

11. 게시글 상세 페이지 내 댓글 기능
	댓글 작성 : form안에 작성된 데이터들을 ajax를 통해 데이터를 전송 및 데이터 베이스에 저장
	댓글 출력 : 게시글의 기본키를 활용하여 Thymeleaf로 해당 댓글들을 출력

12. 삭제 기능
	해당 정보의 기본키를 Mapper을 통해 데이터 베이스에서 비교하여 해당 정보를 삭제
	DELETE 쿼리 문 사용

13. 게시글 수정 페이지
	게시글 상세 페이지로부터 이동
	변경 가능한 부분은 input 혹은 select으로 처리
	게시글 삭제 가능 : 12번 기능
	게시글 수정 완료 가능 : 15번 기능
	게시글 상세 페이지로 이동 가능 : 6번 기능

14. 댓글 작성 기능
	댓글 입력 칸을 input으로 처리
	댓글 저장 버튼 클릭 시 해당 리뷰의 기본키를 외래키로 데이터 베이스에 삽입
	삭제  /  삽입 / 수정은 Transaction을 활용 : 15번 기능

15. 삽입 / 저장 기능
	저장하고 싶은 정보들을value값으로 넘겨서Mapper을 통해 데이터베이스에 삽입
	조건 추가 가능
	INSERT쿼리 문 사용

16. 업데이트 기능
	수정하고 싶은 정보들을value값으로 넘겨서Mapper을 통해 데이터 베이스에 수정
	조건 추가 가능
	UPDATE쿼리 문 사용

17. Interceptor & Configuration
 로그인을 하지 않은 경우 시술 후기 목록 등 몇몇 페이지로 이동 시 에러 발생
 이를 방지하기 위해 로그인한 경우에만 해당 페이지 접속이 되도록 설정
 로그인 안했을 때 해당 페이지 이동 버튼을 클릭 시 로그인 페이지로 redirect 설정

개발 도구 :

∙ 언어 - JAVA  / HTML / CSS / JQuery / JavaScript
∙ IDE 도구 - IntelliJ
∙ DB - MySQL